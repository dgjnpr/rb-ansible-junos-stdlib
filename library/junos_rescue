#!/usr/bin/env ruby
# WANT_JSON

=begin

  DESCRIPTION:

    This module will load the "rescue" configuration.  This assumes that a rescue configuration
    has been previously saved.  
    
    (*TO-DO*: add the ability to save a rescue config to this module)
  
  ARGUMENTS:
  [required]  
    host        - The hostname/ip-address of the target Junos device

  [options]
    action      - [load*, save, delete]
                : load - loads the prior saved rescue configuration
                : save - saves the current config as the rescue config
                : delete - removes the rescue configuration
    
  [credientials]
    user        - The login user, default from ENV['USER']
    password    - The login password.  If not provided, then ssh-key is assumed      
 
      
  RETURNS:

    changed => 'true', always

  NOTES:
    none.
    
=end

require 'rubygems'
require 'json'
require 'net/netconf/jnpr'
require 'junos-ez/stdlib'

ansible_args = JSON.parse( File.read( ARGV[0] )) 

login = {}
login[:target] = ansible_args['host']
login[:username] = ansible_args['user'] || ENV['USER']
login[:password] = ansible_args['password'] || nil

rescue_action = ansible_args['action'] || 'load'
  
ndev = Netconf::SSH.new( login )
ndev.open

Junos::Ez::Provider( ndev )

case rescue_action
  when 'load'
    ndev.rpc.load_configuration( :rescue => 'rescue' )
    ndev.rpc.commit_configuration
  when 'save'
    ndev.rpc.request_save_rescue_configuration
    if ndev.facts[:personality] == :SRX_BRANCH
      ndev.rpc.request_system_autorecovery_state_save
    end
  when 'delete'
    ndev.rpc.request_delete_rescue_configuration
  else
    ndev.close
    print JSON.dump({'failed' => true, 'msg' => "invalid action: #{rescue_action}"})
    exit(1)
end

ndev.close
print JSON.dump({ 'changed' => true })
