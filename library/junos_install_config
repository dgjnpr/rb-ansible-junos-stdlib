#!/usr/bin/env ruby
# WANT_JSON

=begin

  DESCRIPTION:
  
    This module is used to load the contents of a Junos configuration file.  This module
    will either completely replace the config with the file contents ('override' mode) or
    merge the file contents into the configuration.
    
    This module will exclusively lock the Junos config.  If the lock attempt fails,
    then failure => true will be returned
    
    The file format can be either "set" commands, "text" format, or "XML" format.
    This format is automatically selected by the filename extention.  Refer to the
    junos-ez-stdlib gem documentation for details on this; but in a nutshell:
      .set = set commands
      .conf = text structure (aka "curly-brace")
      .xml = XML
  
  ARGUMENTS:
  [required[
    host        - The hostname/ip-address of the target Junos device
    file        - The configuration file to load
  
  [options]
    override    - True/False*, when True will replace the entire config with the file
                  contents provided.  when False, the file contents are "merged"
                  into the existing configuration
    
    log         - full path to logfile, /dev/null if not provided
 
  [credentials]
    user        - The login user, default from ENV['USER']
    password    - The login password.  If not provided, then ssh-key is assumed                  
    
  RETURNS:
  
    changed => true, when config installed
    
    failed => true, when there was an error
      msg => String indicating error

  EXAMPLE TASK USAGE:
  
    tasks:
    - name: Pushing config ... please wait 
      junos_install_config: >
        host={{ inventory_hostname }}
        file=/usr/local/junos/configs/{{ inventory_hostname }}/junos.conf
        override=True

  NOTES:
     
    A logfile is created in /usr/local/junos/log/<host> to indicate progress of this 
    activity.  For now, the PATH and existing of this logfile is hardcoded.  Likely need
    to fix this.
    
    user/password currently hardcoded; need to fix this args + ssh_keys
    
=end

require 'rubygems'
require 'pp'
require 'json'
require 'net/scp'
require 'logger'
require 'net/netconf/jnpr'
require 'junos-ez/stdlib'


ansible_args = JSON.parse( File.read( ARGV[0] )) 

hostname = ansible_args['host']
file_on_server = ansible_args['file']
file_name = File.basename( file_on_server )
logfile_name = ansible_args['log'] || '/dev/null'

# -------------------------------------------------------------------
# setup a logger object to capture status/progress. Use mode "a+"
# to append to the file
# -------------------------------------------------------------------

logfile = File.open( logfile_name, "a+")
logfile.sync = true
log = Logger.new( logfile )
log.progname = hostname

log.info( "/START: config-install for inventory_hostname: #{ hostname }" )

# -------------------------------------------------------------------
# setup return hash to print at the end
# -------------------------------------------------------------------

result = {
  'ansible_facts' => {
    'reboot_required' => false
  }
}

# -------------------------------------------------------------------
# Open a connection to the Junos target
# -------------------------------------------------------------------

login = {}
login[:target] = ansible_args['host']
login[:username] = ansible_args['user'] || ENV['USER']
login[:password] = ansible_args['password'] || nil

ndev = Netconf::SSH.new( login )
ndev.open

# -------------------------------------------------------------------
# attach Junos-EZ providers & utils that we need ...
# -------------------------------------------------------------------

Junos::Ez::Provider( ndev )
Junos::Ez::Config::Utils( ndev, :cfg )

# -------------------------------------------------------------------
# Exclusive config-load sequence with exception handling 
# -------------------------------------------------------------------

def ansible_module_fail( ndev, err_msg )
  ndev.close
  print JSON.dump({'failed' => true, 'msg' => err_msg })
  exit( 1 )
end

# ===================================================================
# Step-1: Lock config, and load changes
# ===================================================================

begin     
  
  # -----------------------------------------------------------------  
  # lock the candidate config 
  # -----------------------------------------------------------------  
  
  ndev.cfg.lock!

  # -----------------------------------------------------------------  
  # load the contents of the config file into the device. 
  # check for load/commit errors
  # -----------------------------------------------------------------  
  
  log.info( "/LOAD: config-file #{ file_on_server }")
  load_opts = { :filename => file_on_server }
  load_opts[:override!] = true if ansible_args['override']
  
  ndev.cfg.load!( load_opts )
  log.info("!OK/LOAD: configuration loaded OK.")
  
rescue Netconf::LockError => e
  rpc_err = Junos::Ez::rpc_errors( e.rsp )
  log.error("!ERROR/LOCK: #{errs[0][:message]}")
  ansible_module_fail( ndev, errs[0][:message] )
  # unreacable
  
rescue Netconf::EditError => e
  rpc_err = Junos::Ez::rpc_errors( e.rsp )
  unless rpc_err[0][:severity] == 'warning'
    log.error("!ERROR/LOAD: #{rpc_err[0][:message]}")
    ansible_module_fail( ndev, rpc_err[0][:message] )
  else
    log.info("!OK/LOAD: configuration loaded OK, with warnings.")
  end
end # config-load sequence


# ===================================================================
# Step-2: Commit changes, and unlock config
# ===================================================================

begin
  log.info("/COMMIT-CHECK: validating configuration ... ")
  unless (errs = ndev.cfg.commit?) == true
    log.error( "!ERROR/COMMIT-CHECK: #{ errs[0][:message] }" )
    if errs[0][:message].include?('Please reboot the system')
      result['ansible_facts']['reboot_required'] = true
    end
  end
  
  log.info("!OK/COMMIT-CHECK: configuration validated")

  # -----------------------------------------------------------------  
  # commit the changes and unlock the config
  # -----------------------------------------------------------------  
  
  log.info("/COMMIT: committing configuration changes ..." )
  ndev.cfg.commit!
  ndev.cfg.unlock!
  
  log.info("!OK/COMMIT: configuration now active")

rescue Netconf::CommitError => e
  unless e.to_s.include?('<ok/>')
    log.error( "!ERROR/COMMIT: #{e.to_s}" )
    ansible_module_fail( ndev, e.to_s )
  end
  ndev.cfg.unlock!
  
  log.info("!OK/COMMIT: configuration now active")
end

### -----------------------------------------------------------------
### All Done !!!
### -----------------------------------------------------------------

log.info( "/END: config-install for inventory_hostname: #{ hostname }" )
ndev.close
result['changed'] = true
print JSON.dump(result)
